# AWS playbook
#pip install awscli
#aws configure 
# inserir as credenciais
---

  - hosts: localhost
    connection: local
    gather_facts: False
  
    vars:
      key_name: my-aws #Key name of ssh generated 
      region: sa-east-1
      image-linux-aws: ami-003449ffb2605a74c # https://cloud-images.ubuntu.com/locator/ec2/
      image-ubuntu: ami-001c16a3a4f5d85f1
      id: "Ec2-junior" # change the name
      sec_group: "{{ id }}-sec"
      #vpc
      vpc_cidr: 10.10.0.0/24
      vpc_name: "Ansible VPC"
      # Subnet
      subnet_name: "Ansible Subnet"
      subnet_cidr: 10.10.0.0/26

      #Internet Gateway name
      igw_name: "Traffic IGW"

  
    tasks:
      block:
      - name: Create a VPC
        ec2_vpc_net: 
          name: "{{vpc-name}}"
          cidr_block: "{{vpc_cidr}}"
          region: "{{region}}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          state: present
          register: vpc

      - name: Associete a subnet to the vpc
        ec2_vpc_subnet:
          state: present
          vpc_id: "{{vpc_id}}"
          region: "{{region}}"
          cidr: "{{subnet_cidr}}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          map_public: yes
          resouces_tags:
            Name: "{{subnet_name}}"
          register: subnet

      - name: Create a Internet Gateway
        ec2_vpc_igw: 
          vpc_id: "{{vpc_id}}"
          region: "{{region}}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          state: "present"
          tags:
            Name: "{{igw_name}}"
          register: igw
      - name: Route IGW
        ec2_vpc_route_table:
          vpc_id: "{{vpc_id}}"
          region: "{{region}}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          subnets: 
            - "{{subnet.subnet.id}}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{igw.gateway_id}}"
  
      - name: Facts
        block:
  
        - name: Get instances facts
          ec2_instance_facts:
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
            region: "{{ region }}"
          register: result
  
        - name: Instances ID
          debug:
            msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
          loop: "{{ result.instances }}"
  
        tags: always
  
  
      - name: Provisioning EC2 instances
        block:
  
        - name: Upload public key to AWS
          ec2_key:
            name: "{{ key_name }}"
            key_material: "{{ lookup('file', '/Users/ec2-user/.ssh/{{ key_name }}.pub') }}" #LEMBRAR DE TROCAR O USERNAME
            region: "{{ region }}"
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
  
        - name: Create security group
          ec2_group:
            name: "{{ sec_group }}"
            description: "Sec group for app {{ id }}"
            # vpc_id: 12345
            region: "{{ region }}"
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
            rules:
              - proto: tcp
                ports: 
                  - 80
                cidr_ip: 0.0.0.0/0 
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
                rule_desc: allow all on ssh port
          register: result_sec_group
  
        - name: Provision instance(s)
          ec2:
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
            key_name: "{{ key_name }}"
            id: "{{ id }}"
            group_id: "{{ result_sec_group.group_id }}"
            image: "{{ image-linux-aws }}"
            instance_type: t2.micro
            region: "{{ region }}"
            wait: true
            count: 1 # quantaty of instances
            # exact_count: 2
            # count_tag:
            #   Name: App
            # instance_tags:
            #   Name: App
  
        tags: ['never', 'create_ec2']


        